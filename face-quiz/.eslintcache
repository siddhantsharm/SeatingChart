[{"/Users/siddhantsharma/Desktop/face-quiz/src/index.js":"1","/Users/siddhantsharma/Desktop/face-quiz/src/reportWebVitals.js":"2","/Users/siddhantsharma/Desktop/face-quiz/src/App.js":"3","/Users/siddhantsharma/Desktop/face-quiz/src/data.js":"4","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/index.js":"5","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/App.js":"6","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/reportWebVitals.js":"7","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/data.js":"8","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/FlashCards.js":"9","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/BinaryChoice.js":"10","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/Alpha.js":"11","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/MultipleChoice.js":"12"},{"size":500,"mtime":1610641829777,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1610627803460,"results":"15","hashOfConfig":"14"},{"size":3035,"mtime":1610641634010,"results":"16","hashOfConfig":"14"},{"size":4176,"mtime":1610641880974,"results":"17","hashOfConfig":"14"},{"size":500,"mtime":1610641829777,"results":"18","hashOfConfig":"19"},{"size":1887,"mtime":1614254676270,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1610627803460,"results":"21","hashOfConfig":"19"},{"size":4176,"mtime":1612768948638,"results":"22","hashOfConfig":"19"},{"size":2131,"mtime":1614253264164,"results":"23","hashOfConfig":"19"},{"size":3061,"mtime":1614254884068,"results":"24","hashOfConfig":"19"},{"size":2892,"mtime":1615347251220,"results":"25","hashOfConfig":"19"},{"size":3343,"mtime":1615347236508,"results":"26","hashOfConfig":"19"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"1hhrtjg",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1ju6txy",{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"39"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"39"},"/Users/siddhantsharma/Desktop/face-quiz/src/index.js",[],["60","61"],"/Users/siddhantsharma/Desktop/face-quiz/src/reportWebVitals.js",[],"/Users/siddhantsharma/Desktop/face-quiz/src/App.js",["62","63","64"],"import React, { useState } from 'react';\nimport {classData, studentData, currentUser} from './data.js'; // import hardcoded data\n\nexport default function App() {\n\t/* const questions = [\n\t\t{\n\t\t\tquestionText: 'What is the capital of France?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'New York', isCorrect: false },\n\t\t\t\t{ answerText: 'London', isCorrect: false },\n\t\t\t\t{ answerText: 'Paris', isCorrect: true },\n\t\t\t\t{ answerText: 'Dublin', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'Who is CEO of Tesla?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Jeff Bezos', isCorrect: false },\n\t\t\t\t{ answerText: 'Elon Musk', isCorrect: true },\n\t\t\t\t{ answerText: 'Bill Gates', isCorrect: false },\n\t\t\t\t{ answerText: 'Tony Stark', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'The iPhone was created by which company?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: 'Apple', isCorrect: true },\n\t\t\t\t{ answerText: 'Intel', isCorrect: false },\n\t\t\t\t{ answerText: 'Amazon', isCorrect: false },\n\t\t\t\t{ answerText: 'Microsoft', isCorrect: false },\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tquestionText: 'How many Harry Potter books are there?',\n\t\t\tanswerOptions: [\n\t\t\t\t{ answerText: '1', isCorrect: false },\n\t\t\t\t{ answerText: '4', isCorrect: false },\n\t\t\t\t{ answerText: '6', isCorrect: false },\n\t\t\t\t{ answerText: '7', isCorrect: true },\n\t\t\t],\n\t\t},\n\t]; */\n\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\tconst [showScore, setShowScore] = useState(false);\n\tconst [score, setScore] = useState(0);\n\tconst [img, setImg] = useState(studentData[0].img.default);\n\n\tconst handleAnswerOptionClick = (isCorrect) => {\n\t\tif (isCorrect) {\n\t\t\tsetScore(score + 1);\n\t\t}\n\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\tif (nextQuestion < studentData.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t\tsetImg(studentData[nextQuestion].img.default);\n\t\t} else {\n\t\t\tsetShowScore(true);\n\t\t}\n\t};\n\tlet random = currentQuestion;\n\tif(studentData.length - currentQuestion < 4 ){\n\t\trandom = studentData.length - currentQuestion;\n\t}\n\n\tconst questions = [{\n\t\tanswerOptions: [\n\t\t\t{ answerText: studentData[currentQuestion].name, isCorrect: true },\n\t\t\t{ answerText: studentData[random + 1].name, isCorrect: false },\n\t\t\t{ answerText: studentData[random + 2].name, isCorrect: false },\n\t\t\t{ answerText: studentData[random + 3].name, isCorrect: false },\n\t\t],\n\t}]\n\n\tquestions[0].answerOptions.sort((a, b) => (a.answerText > b.answerText) ? 1 : -1);\n\treturn (\n\n\t\t\n\n\n\t\t<div className='app'>\n\t\t\t{showScore ? (\n\t\t\t\t<div className='score-section'>\n\t\t\t\t\tYou scored {score} out of {studentData.length}\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Question {currentQuestion + 1}</span>/{studentData.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div >\n\t\t\t\t\t\t<img src={img}  />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t{questions[0].answerOptions.map((answerOption) => (\n\t\t\t\t\t\t\t<button onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","/Users/siddhantsharma/Desktop/face-quiz/src/data.js",[],"/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/index.js",[],["65","66"],"/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/App.js",["67","68","69","70","71"],"import React, {useState} from 'react';\nimport Alpha from './Alpha';\nimport FlashCards from './FlashCards';\nimport BinaryChoice from './BinaryChoice';\nimport MultipleChoice from './MultipleChoice';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      mode: 'FlashCards',\n      selectMode: true,\n    };\n  }\n  render() {\n\n    const change = (to) => {\n      this.setState({mode: to})\n      this.setState({selectMode:false})\n    }\n    const choose = () => {\n      this.setState({mode: 'BinaryChoice'})\n    }\n    const changeMode = () => {\n      this.setState({selectMode:true})\n    }\n\n    let select = <React.Fragment>\n\t\t<div className ='test'>\n\t\t\t<table>\n      <tr>\n      <th><button onClick={() => change('FlashCards')}> Flash Cards </button></th>\n      <th><button onClick={() => change('MultipleChoice')}> Multiple Choice Face-Quiz </button></th>\n      <th><button onClick={() => change('BinaryChoice')}> Binary Choice Faze-Quiz </button></th>\n      <th><button onClick={() => change('Alpha')}> Face-Quiz Alpha </button></th>\n      </tr>\n      </table>\n\t\t</div>\n\t\t</React.Fragment>\n\n\n    let ans;\n    if(this.state.mode === 'FlashCards') {\n      ans =  <FlashCards />;\n    }\n    else if(this.state.mode == 'MultipleChoice') {\n      ans =  <MultipleChoice />;\n    }\n    else if(this.state.mode == 'BinaryChoice') {\n      ans =  <BinaryChoice />;\n    }\n    else if(this.state.mode == 'Alpha') {\n      ans = <Alpha />;\n    }\n    console.log(ans);\n\n    return (\n      <React.Fragment>\n      {this.state.selectMode ? (\n        <React.Fragment>\n        {select}\n        </React.Fragment>\n      ) :(\n        <React.Fragment>\n        <div className = 'change-button' onClick ={() => changeMode()}> Change Mode </div>\n        {ans}\n        </React.Fragment>\n      )}\n      </React.Fragment>\n\n    );\n  }\n\n}\n\nexport default App;\n","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/reportWebVitals.js",[],"/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/data.js",[],["72","73"],"/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/FlashCards.js",["74","75","76","77"],"import React, { useState } from 'react';\nimport {classData, studentData, currentUser} from './data.js'; // import hardcoded data\nimport './FlashCards.css'\n\nexport default function FlashCards() {\n\n\t// Set the first question to the first student in your database.\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\t//showScore --> Shows the overall score if value is true.\n\tconst [finished, setFinished] = useState(false);\n\t// img --> Fetches the image of the currenQuestion student.\n\tconst [img, setImg] = useState(studentData[0].img.default);\n\n\tconst[known, setKnown] = useState(studentData);\n\n\n\tconst handleNextOptionClick = () => {\n\n\t\t//Change to the next question.\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\t//If it's the last question, set schowScore to true as the quiz has ended, otherwise show the next student.\n\t\tif (nextQuestion < known.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t\tsetImg(known[nextQuestion].img.default);\n\t\t} else {\n\t\t\tsetFinished(true);\n\t\t}\n\t};\n\n\tconst restart = () => {\n\n\t\t//Change to the next question.\n\t\tconst nextQuestion = 0;\n\t\t//If it's the last question, set schowScore to true as the quiz has ended, otherwise show the next student.\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t\tsetImg(known[nextQuestion].img.default);\n\t\t\tsetFinished(false);\n\n\t};\n\n\t// random name variable.\n\n\treturn (\n\n\n\n\t\t<React.Fragment>\n\t\t<div className='app'>\n\t\t\t{finished ? (\n\t\t\t\t<div className='restart-section' onClick={() => restart()} >\n\t\t\t\t\t<p className=\"text\">Press to Restart </p>\n\t\t\t\t</div>\n\t\t// Else iterate through all the students in the database.\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Student {currentQuestion + 1}</span>/{studentData.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div >\n\t\t\t\t\t\t<img src={img}  />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t<p className='name'> {known[currentQuestion].name} </p>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t\t{!finished ? (\n\t\t<button className=\"next\" onClick ={() => handleNextOptionClick()}> <p className=\"text\">Next </p> </button>\n\t): (\n\t\t<p></p>\n\t)\n\t}\n\t\t</React.Fragment>\n\t);\n}\n","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/BinaryChoice.js",["78","79","80","81","82"],"import React, { useState } from 'react';\nimport {classData, studentData, currentUser} from './data.js'; // import hardcoded data\nimport './BinaryChoice.css'\n\nexport default function BinaryChoice() {\n\n\t// Set the first question to the first student in your database.\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\t//showScore --> Shows the overall score if value is true.\n\tconst [showScore, setShowScore] = useState(false);\n\t// score --> Increments by 1 for every correct answer and tracks score.\n\tconst [score, setScore] = useState(0);\n\t// img --> Fetches the image of the currenQuestion student.\n\tconst [img, setImg] = useState(studentData[0].img.default);\n\n\tconst[known, setKnown] = useState(studentData);\n\n\tconst[current, setCurrent] = useState(1);\n\n\tconst[totalStudents, setTotalStudents] = useState(known.length);\n\n\n\n\tconst handleYesOptionClick = (isCorrect, name) => {\n\t\tif (isCorrect) {\n\t\t\tsetScore(score + 1);\n\t\t}\n\t\tsetKnown(known.filter(item => item.name !== name))\n\t\tyesHandler();\n\t}\n\n\tconst yesHandler = () => {\n\t\tsetCurrent(current + 1);\n\n\t\t//Change to the next question.\n\t\tconst nextQuestion = currentQuestion;\n\t\t//If it's the last question, set schowScore to true as the quiz has ended, otherwise show the next student.\n\t\tif (nextQuestion < known.length - 1) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t\tsetImg(known[nextQuestion + 1].img.default);\n\t\t} else {\n\t\t\tsetShowScore(true);\n\t\t}\n\t};\n\n\tconst handleNoOptionClick = () => {\n\t\tsetCurrent(current + 1);\n\t\t//Change to the next question.\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\t//If it's the last question, set schowScore to true as the quiz has ended, otherwise show the next student.\n\t\tif (nextQuestion < known.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t\tsetImg(known[nextQuestion].img.default);\n\t\t} else {\n\t\t\tsetShowScore(true);\n\t\t}\n\t};\n\n\t// random name variable.\n\tconst restart = () => {\n\t\tif(known.length != 0) {\n\t\tsetShowScore(false);\n\t\tsetCurrent(1);\n\t\tsetTotalStudents(known.length);\n\t\tsetCurrentQuestion(0);\n\t\tsetImg(known[0].img.default);\n\t\tsetScore(0);\n\t}\n\t}\n\n\treturn (\n\n\n\n\n\t\t<div className='app'>\n\t\t\t{showScore ? (\n\t\t\t\t<div className='score-section' onClick = {() => restart()}>\n\n\t\t\t\t\t<div>You scored {score} out of {totalStudents}.\n\t\t\t\t\t<p></p>\n\t\t\t\t\t{known.length != 0 ? (\n\t\t\t\t\t\t<div>Press to try again with the {totalStudents - score} students you got wrong. </div>\n\t\t\t\t\t) :(\n\t\t\t\t\t\t<p> </p>\n\t\t\t\t\t) }\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t// Else iterate through all the students in the database.\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Student {current}</span>/{totalStudents}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div >\n\t\t\t\t\t\t<img src={img}  />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t<div className='button-spacing'>\n\t\t\t\t\tDo you know this student?\n\t\t\t\t\t<p/>\n\t\t\t\t\t\t<button onClick={() => handleYesOptionClick(true, known[currentQuestion].name)}> Yes </button>\n\t\t\t\t\t\t<p></p>\n\t\t\t\t\t\t<button onClick={() => handleNoOptionClick()}> No </button>\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/Alpha.js",["83","84","85"],"import React, { useState } from 'react';\nimport {classData, studentData, currentUser} from './data.js'; // import hardcoded data\nimport './MultipleChoice.css'\n\nexport default function Alpha() {\n\n\t// Set the first question to the first student in your database.\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\t//showScore --> Shows the overall score if value is true.\n\tconst [showScore, setShowScore] = useState(false);\n\t// score --> Increments by 1 for every correct answer and tracks score.\n\tconst [score, setScore] = useState(0);\n\t// img --> Fetches the image of the currenQuestion student.\n\tconst [img, setImg] = useState(studentData[0].img.default);\n\n\t/* logic for a correct answer. If answer is correct increment score by 1 and present\n\tthe next student or total score if all students have be presented already. */\n\tconst handleAnswerOptionClick = (isCorrect) => {\n\t\tif (isCorrect) {\n\t\t\tsetScore(score + 1);\n\t\t}\n\t\t//Change to the next question.\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\t//If it's the last question, set schowScore to true as the quiz has ended, otherwise show the next student.\n\t\tif (nextQuestion < studentData.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t\tsetImg(studentData[nextQuestion].img.default);\n\t\t} else {\n\t\t\tsetShowScore(true);\n\t\t}\n\t};\n\n\t// random name variable.\n\tlet random = currentQuestion;\n\tif(studentData.length - currentQuestion < 4 ){\n\t\trandom = studentData.length - currentQuestion;\n\t}\n\n\t/* Gets random names from the database. Currently accesses the next four names in the database\n\t or the previous four depending on index of the currentQuestion. Only the correct name has isCorrect value true. */\n\tconst questions = [{\n\t\tanswerOptions: [\n\t\t\t{ answerText: studentData[currentQuestion].name, isCorrect: true },\n\t\t\t{ answerText: studentData[random + 1].name, isCorrect: false },\n\t\t\t{ answerText: studentData[random + 2].name, isCorrect: false },\n\t\t\t{ answerText: studentData[random + 3].name, isCorrect: false },\n\t\t],\n\t}]\n\n\t// Sort all the answerOptions in alphabetical order so there is no apparent pattern to all the options.\n\tquestions[0].answerOptions.sort((a, b) => (a.answerText > b.answerText) ? 1 : -1);\n\treturn (\n\n\n\n\n\t\t<div className='app'>\n\t\t\t{showScore ? (\n\t\t\t\t<div className='score-section'>\n\t\t\t\t\tYou scored {score} out of {studentData.length}\n\t\t\t\t</div>\n\t\t// Else iterate through all the students in the database.\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Question {currentQuestion + 1}</span>/{studentData.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div >\n\t\t\t\t\t\t<img src={img}  />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t{questions[0].answerOptions.map((answerOption) => (\n\t\t\t\t\t\t\t<button onClick={() => handleAnswerOptionClick(answerOption.isCorrect)}>{answerOption.answerText}</button>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n","/Users/siddhantsharma/Desktop/Berkeley_Law_Frontend/face-quiz/src/MultipleChoice.js",["86","87","88"],"import React, { useState } from 'react';\nimport {classData, studentData, currentUser} from './data.js'; // import hardcoded data\nimport './MultipleChoice.css';\n\nexport default function MultipleChoice() {\n\n\t// Set the first question to the first student in your database.\n\tconst [currentQuestion, setCurrentQuestion] = useState(0);\n\t//showScore --> Shows the overall score if value is true.\n\tconst [showScore, setShowScore] = useState(false);\n\t// score --> Increments by 1 for every correct answer and tracks score.\n\tconst [score, setScore] = useState(0);\n\t// img --> Fetches the image of the currenQuestion student.\n\tconst [img, setImg] = useState(studentData[0].img.default);\n\n\tconst [asked, setAsked] = useState(false);\n\n\n\t/* logic for a correct answer. If answer is correct increment score by 1 and present\n\tthe next student or total score if all students have be presented already. */\n\tconst handleAnswerOptionClick = (answerOption) => {\n\t\tif (answerOption.isCorrect) {\n\t\t\tsetScore(score + 1);\n\t\t}\n\t\tsetAsked(true);\n\n\n\t};\n\n\tconst handleNextClick = (asked) => {\n\t\tsetAsked(false);\n\t\t//Change to the next question.\n\t\tconst nextQuestion = currentQuestion + 1;\n\t\t//If it's the last question, set schowScore to true as the quiz has ended, otherwise show the next student.\n\t\tif (nextQuestion < studentData.length) {\n\t\t\tsetCurrentQuestion(nextQuestion);\n\t\t\tsetImg(studentData[nextQuestion].img.default);\n\t\t} else {\n\t\t\tsetShowScore(true);\n\t\t}\n\t}\n\n\t// random name variable.\n\tlet random = currentQuestion;\n\tif(studentData.length - currentQuestion < 4 ){\n\t\trandom = studentData.length - currentQuestion;\n\t}\n\n\t/* Gets random names from the database. Currently accesses the next four names in the database\n\t or the previous four depending on index of the currentQuestion. Only the correct name has isCorrect value true. */\n\tconst questions = [{\n\t\tanswerOptions: [\n\t\t\t{ answerText: studentData[currentQuestion].name, isCorrect: true, class: \"correct\" },\n\t\t\t{ answerText: studentData[random + 1].name, isCorrect: false, class: \"incorrect\" },\n\t\t\t{ answerText: studentData[random + 2].name, isCorrect: false, class: \"incorrect\" },\n\t\t\t{ answerText: studentData[random + 3].name, isCorrect: false, class: \"incorrect\" },\n\t\t],\n\t}]\n\n\t// Sort all the answerOptions in alphabetical order so there is no apparent pattern to all the options.\n\tquestions[0].answerOptions.sort((a, b) => (a.answerText > b.answerText) ? 1 : -1);\n\treturn (\n\n\n\n\t\t<React.Fragment>\n\t\t<div className='app'>\n\t\t\t{showScore ? (\n\t\t\t\t<div className='score-section'>\n\t\t\t\t\tYou scored {score} out of {studentData.length}\n\t\t\t\t</div>\n\t\t// Else iterate through all the students in the database.\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<div className='question-section'>\n\t\t\t\t\t\t<div className='question-count'>\n\t\t\t\t\t\t\t<span>Question {currentQuestion + 1}</span>/{studentData.length}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div >\n\t\t\t\t\t\t<img src={img}  />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='answer-section'>\n\t\t\t\t\t\t{(questions[0].answerOptions.map((answerOption) => (\n\t\t\t\t\t\t\t<button className = {asked ? answerOption.class : \"normal\"} onClick={() => handleAnswerOptionClick(answerOption)}>{answerOption.answerText}</button>\n\t\t\t\t\t\t)))}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</div>\n\t\t{asked ? (\n\t\t<button className = \"next\" onClick={() => handleNextClick(asked)}> <p className=\"text\">Next </p></button>\n\t\t):\n\t\t<p></p>}\n\n\t\t</React.Fragment>\n\t);\n}\n",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":2,"column":9,"nodeType":"95","messageId":"96","endLine":2,"endColumn":18},{"ruleId":"93","severity":1,"message":"97","line":2,"column":33,"nodeType":"95","messageId":"96","endLine":2,"endColumn":44},{"ruleId":"98","severity":1,"message":"99","line":94,"column":7,"nodeType":"100","endLine":94,"endColumn":25},{"ruleId":"89","replacedBy":"101"},{"ruleId":"91","replacedBy":"102"},{"ruleId":"93","severity":1,"message":"103","line":1,"column":16,"nodeType":"95","messageId":"96","endLine":1,"endColumn":24},{"ruleId":"93","severity":1,"message":"104","line":23,"column":11,"nodeType":"95","messageId":"96","endLine":23,"endColumn":17},{"ruleId":"105","severity":1,"message":"106","line":48,"column":29,"nodeType":"107","messageId":"108","endLine":48,"endColumn":31},{"ruleId":"105","severity":1,"message":"106","line":51,"column":29,"nodeType":"107","messageId":"108","endLine":51,"endColumn":31},{"ruleId":"105","severity":1,"message":"106","line":54,"column":29,"nodeType":"107","messageId":"108","endLine":54,"endColumn":31},{"ruleId":"89","replacedBy":"109"},{"ruleId":"91","replacedBy":"110"},{"ruleId":"93","severity":1,"message":"94","line":2,"column":9,"nodeType":"95","messageId":"96","endLine":2,"endColumn":18},{"ruleId":"93","severity":1,"message":"97","line":2,"column":33,"nodeType":"95","messageId":"96","endLine":2,"endColumn":44},{"ruleId":"93","severity":1,"message":"111","line":14,"column":15,"nodeType":"95","messageId":"96","endLine":14,"endColumn":23},{"ruleId":"98","severity":1,"message":"99","line":61,"column":7,"nodeType":"100","endLine":61,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":2,"column":9,"nodeType":"95","messageId":"96","endLine":2,"endColumn":18},{"ruleId":"93","severity":1,"message":"97","line":2,"column":33,"nodeType":"95","messageId":"96","endLine":2,"endColumn":44},{"ruleId":"105","severity":1,"message":"112","line":61,"column":19,"nodeType":"107","messageId":"108","endLine":61,"endColumn":21},{"ruleId":"105","severity":1,"message":"112","line":82,"column":20,"nodeType":"107","messageId":"108","endLine":82,"endColumn":22},{"ruleId":"98","severity":1,"message":"99","line":97,"column":7,"nodeType":"100","endLine":97,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":2,"column":9,"nodeType":"95","messageId":"96","endLine":2,"endColumn":18},{"ruleId":"93","severity":1,"message":"97","line":2,"column":33,"nodeType":"95","messageId":"96","endLine":2,"endColumn":44},{"ruleId":"98","severity":1,"message":"99","line":70,"column":7,"nodeType":"100","endLine":70,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":2,"column":9,"nodeType":"95","messageId":"96","endLine":2,"endColumn":18},{"ruleId":"93","severity":1,"message":"97","line":2,"column":33,"nodeType":"95","messageId":"96","endLine":2,"endColumn":44},{"ruleId":"98","severity":1,"message":"99","line":80,"column":7,"nodeType":"100","endLine":80,"endColumn":25},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'classData' is defined but never used.","Identifier","unusedVar","'currentUser' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["113"],["114"],"'useState' is defined but never used.","'choose' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["113"],["114"],"'setKnown' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]